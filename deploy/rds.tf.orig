data "aws_secretsmanager_secret_version" "creds" {
  secret_id = "${var.project}${var.environment}-db-cred"
}
#manually create the secrets in aws secret manager
locals {
  db_creds = jsondecode(
    data.aws_secretsmanager_secret_version.creds.secret_string
  )
}
# Define the security group for the RDS instance
resource "aws_security_group" "rds" {
  name   = "rds-sg-${var.project}-${var.environment}"
  vpc_id = module.vpc.vpc_id

  ingress {
    description = "Allow worker nodes to communicate with database"
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = var.private_subnet_cidrs
    #    security_group_names = ["${module.eks.cluster_security_group_name}"]  # Allow incoming traffic from EKS nodes
  }

  tags = {
    Name = "rds-sg-${var.project}-${var.environment}"
  }
}

# Define the RDS subnet group
resource "aws_db_subnet_group" "rds" {
  name       = "${var.project}-${var.environment}-db-subnet-group"
  subnet_ids = module.vpc.private_subnets

  tags = {
    Name = "db-subnet-group-${var.project}-${var.environment}"
  }
}

# Define the RDS instance
resource "aws_db_instance" "rds" {
  identifier                 = "postgres-rds-${var.project}-${var.environment}"
  instance_class             = var.instance_type
  allocated_storage          = var.allocated_storage
  storage_type               = "gp3"
  engine                     = "postgres"
  engine_version             = "15.3"
  username                   = local.db_creds.username
  password                   = local.db_creds.password
  db_subnet_group_name       = aws_db_subnet_group.rds.name
  vpc_security_group_ids     = [aws_security_group.rds.id]
  publicly_accessible        = false
  multi_az                   = var.multi_az
  storage_encrypted          = true
  backup_retention_period    = var.backup_retention_period
  backup_window              = var.backup_window
  maintenance_window         = var.maintenance_window
  auto_minor_version_upgrade = var.auto_minor_version_upgrade
  final_snapshot_identifier  = "${var.final_snapshot_identifier}-${var.project}-${var.environment}"
  skip_final_snapshot        = var.skip_final_snapshot
  copy_tags_to_snapshot      = var.copy_tags_to_snapshot

  tags = {
    Name        = "${var.project}-${var.environment}-postgres-rds",
    Project     = var.project,
    Environment = var.environment
  }
}

output "primary_database_endpoint" {
  value = aws_db_instance.rds.endpoint
}
